// Generated by CoffeeScript 1.6.3
(function() {
  var $log, COURSE_URL, CourseScrape, SECTIONS_URL, SOC_URL, jquery, log, nodeio, parseDays, qs, tidy, util, _ref,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  nodeio = require('node.io');

  qs = require('querystring');

  util = require('util');

  jquery = require('jquery');

  tidy = require('htmltidy').tidy;

  log = function(x) {
    return console.log(util.inspect(x, {
      showHidden: true,
      colors: true,
      depth: 1
    }));
  };

  $log = function($x) {
    var opts;
    opts = {
      indent: true,
      'omit-optional-tags': 'true',
      wrap: 130
    };
    return tidy($x.html(), opts, function(err, html) {
      return console.log(html);
    });
  };

  parseDays = function(days) {
    days = days.replace(/([A-Z]{1}[uh]?)/g, "$1,").split(',');
    if (days[days.length - 1] === '') {
      days.pop();
    }
    return days;
  };

  SOC_URL = "https://ntst.umd.edu/soc/";

  COURSE_URL = SOC_URL + "search?termId=201308&";

  SECTIONS_URL = SOC_URL + "201308/sections.html?";

  CourseScrape = (function(_super) {
    __extends(CourseScrape, _super);

    function CourseScrape() {
      _ref = CourseScrape.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CourseScrape.prototype.run = function(course_name) {
      var courses,
        _this = this;
      courses = [];
      return this.getHtml(COURSE_URL + (qs.stringify({
        courseId: course_name
      })), function(err, $, page) {
        var $$, _$;
        $$ = function(html) {
          return function(sel) {
            return jquery(sel, html);
          };
        };
        _$ = $;
        $ = $$(page);
        if (0 === $('.toggle-sections-link-container').length) {
          return _this.emit("[]");
        }
        return _this.get(SECTIONS_URL + (qs.stringify({
          courseIds: course_name
        })), function(err, sections) {
          var $course, $sec, $sections, c, course, course_data, d, g, sec, _i, _j, _len, _len1, _ref1, _ref2;
          $course = $$($("#" + course_name));
          $sections = $$(sections);
          _ref1 = $sections('.section');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            sec = _ref1[_i];
            $sec = $$(sec);
            _ref2 = $sec('.class-days-container > .row');
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              course = _ref2[_j];
              $course = $$(course);
              course_data = {
                name: course_name,
                section: $sec('.section-id').text().trim(),
                title: $course('.course-title').text(),
                type: $course('.class-type').text() || void 0,
                instructor: $sec('.section-instructor').text(),
                credits: $("#" + course_name + " .course-min-credits").text(),
                building: $course('.building-code').text(),
                room: $course('.class-room').text(),
                core: (function() {
                  var _k, _len2, _ref3, _results;
                  _ref3 = $course('.core-codes-group .course-info-label~a');
                  _results = [];
                  for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                    c = _ref3[_k];
                    _results.push(c.innerHTML);
                  }
                  return _results;
                })(),
                gened: (function() {
                  var _k, _len2, _ref3, _results;
                  _ref3 = $course('.gen-ed-codes-group .course-subcategory > a');
                  _results = [];
                  for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                    g = _ref3[_k];
                    _results.push(g.innerHTML);
                  }
                  return _results;
                })(),
                seats: {
                  total: $sec('.total-seats-count').text(),
                  open: $sec('.open-seats-count').text(),
                  waitlist: $sec('.waitlist-count').text()
                },
                days: (function() {
                  var _k, _len2, _ref3, _results;
                  _ref3 = parseDays($course('.section-days').text());
                  _results = [];
                  for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                    d = _ref3[_k];
                    _results.push({
                      day: d,
                      start: $course('.class-start-time').text(),
                      end: $course('.class-end-time').text()
                    });
                  }
                  return _results;
                })()
              };
              if (0 < course_data.days.length) {
                courses.push(course_data);
              }
            }
          }
          return _this.emit(JSON.stringify(courses));
        });
      });
    };

    return CourseScrape;

  })(nodeio.JobClass);

  this["class"] = CourseScrape;

  this.job = new CourseScrape({
    timeout: 10
  });

}).call(this);
